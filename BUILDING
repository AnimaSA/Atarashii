Configuring Atarashii! for Development and Building


Fetching the Code
-----------------
After cloning the Atarashii code, you will need to fetch the third-party
code stored as submodules. In the root Atarashii directory, run the
following two commands:

  - git submodule init
  - git submodule update
 
This will fetch the required third-party libraries used in the code.

If you will be working with the submodule code directly, please read about
maintaining submodules at
http://git-scm.com/book/en/Git-Tools-Submodules


Importing the Projects to Eclipse with the ADT Plugin
-----------------------------------------------------
You should already have the ADT Plugin installed. If you do not, follow the
instructions at https://developer.android.com/tools/sdk/eclipse-adt.html

NOTE: Due to naming conflicts because of the default names used by Eclipse,
you will need to import each project individually.

First, import the main Atarashii project:

  - In Eclipse, create a new "Android Project from Existing Code"
  - Select the Atarashii root folder inside the checkout
  - Deselect all items and only select the Atarashii main project, which should
    be listed at the top
  - You should rename this project from the default name given by Eclipse

Next, import the third-party modules from inside the third-party directory.
With the latest version of ADT, this is now possible in one fell swoop.

  - In Eclipse, create a new "Android Project from Existing Code"
  - Select the third-party directory from Atarashii's root
  - You will see a big list of things. We only want the libraries, so untick
    the list items that aren't the libraries.
  - You *must* ensure that no libraries are imported with a conflicting name.
    Left-click each of the checkmarked libraries, then click the name beside it
	and rename it to whatever you choose to ensure it is unique.


Fixing Support Library Conflicts & More
----------------------------------------
While Atarashii! provides its own Android Support Library, so does ABS. This 
is an issue, as their signatures will conflict due to Atarashii! utilizing a newer
version. To resolve this:

  - Right-click the ActionBarSherlock project in your Package Explorer
  - Select Properties -> Java Build Path -> Order and Export
  - Untick Android Private Libraries
  
Additionally, the Crouton library depends on this version of the Support Library,
but does not bring it's own. To tell Crouton to use our Support Library:

  - Right-click the Crouton project in your Package Explorer
  - Select Properties -> Java Build Path -> Libraries
  - Add JARs... -> Atarashii/libs/android-support-v4.jar
   
  
You should now be able to successfully build and develop Atarashii!


Revision 20130602